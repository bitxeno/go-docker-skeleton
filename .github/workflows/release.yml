name: "ðŸš€ Release"

# on events
on:
  push:
    tags: ["v*"]

# jobs
jobs:
  # generate build cross-platform build files
  release:
    name: Generate cross-platform builds
    permissions:
      contents: write
      packages: write
    strategy:
      matrix:
        go_version: [1.18.x]
    runs-on: ubuntu-latest
    steps:
      # step 1: checkout repository code
      - name: Checkout the repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # step 2: setup build envirement
      - uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go_version }}
      - uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # step 3: set workflow variables
      - id: metadata
        uses: ahmadnassri/action-metadata@v2
      - name: Initialize workflow environments variables
        run: |
          echo "VERSION='${{ github.ref_name }}'" >> $GITHUB_ENV
          echo "BUILDDATE=$(date '+%F-%T')" >> $GITHUB_ENV
          echo "COMMIT=$(git rev-parse --verify HEAD)" >> $GITHUB_ENV
          echo "APP_NAME='${{ steps.metadata.outputs.repository_name }}'" >> $GITHUB_ENV
          echo "REPO='github.com/${{ github.repository }}'" >> $GITHUB_ENV
          echo "BRANCH='${{ steps.metadata.outputs.repository_default_branch }}'" >> $GITHUB_ENV

      # step 4: generate build files
      - name: build frontend
        run: cd ./view && npm install && npm run build
      - name: Generate build files
        uses: crazy-max/ghaction-xgo@v2
        with:
          xgo_version: latest
          go_version: ${{ matrix.go_version }}
          dest: build
          prefix: ${{env.APP_NAME}}
          targets: windows/386,windows/amd64,linux/386,linux/amd64,darwin/386,darwin/amd64,linux/386,linux/arm64
          v: true
          x: false
          ldflags: -w -s -X ${{env.REPO}}/internal/version.Version=${{env.VERSION}} -X ${{env.REPO}}/internal/version.BuildDate=${{env.BUILDDATE}} -X ${{env.REPO}}/internal/version.Commit=${{env.COMMIT}} -X ${{env.REPO}}/internal/mode.Mode=production

      # step 5: compress build files
      - name: Compress build files
        run: cd ./build && for i in *; do tar -czf $i.tar.gz $i; done && cd ..

      # step 6: Generate Changelog
      - name: Generate Changelog
        id: changelog
        uses: bitxeno/changelogithub-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
          output-file: ./docs/CHANGELOG.md
          types: |
            feat
            fix
            perf
            refactor
            tweak
          #   docs
          #   build
          #   test
          #   style
          #   ci
          #   chore
          #   improve
      - name: Git commit changelog
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          add: "docs/"
          message: "docs: release notes for ${{ github.ref_name }}"
          push: "origin HEAD:${{ env.BRANCH }}"

      # step 7: Upload binary to GitHub Release
      - name: Upload binary to GitHub Release
        uses: softprops/action-gh-release@v1
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          files: |
            ./build/*.tar.gz
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}\
          body: ${{ steps.changelog.outputs.changelog }}
          fail_on_unmatched_files: true

      # step 8.1: push to DockerHub
      - name: Login to DockerHub
        if: ${{ secrets.DOCKER_TOKEN }}
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Build and push Docker images to DockerHub
        if: ${{ secrets.DOCKER_TOKEN }}
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          build-args: |
            APP_NAME=${{env.APP_NAME}}
            VERSION=${{env.VERSION}}
            BUILDDATE=${{env.BUILDDATE}}
            COMMIT=${{env.COMMIT}}

      # step 8.2: push to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
      - name: Build and push Docker images to ghci
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            APP_NAME=${{env.APP_NAME}}
            VERSION=${{env.VERSION}}
            BUILDDATE=${{env.BUILDDATE}}
            COMMIT=${{env.COMMIT}}
